public without sharing class CompleteControlController {
    /*// In order to make an Apex method we can call from an Aura component, we must annotate it with the @AuraEnabled
    // annotation and it must be public and static
	//
    // Because a method cannot be more exposed than the class that contains it, the containing class must be public
    // or global
	//
    // Our function here will return a list of the Ids of all open cases */
    @AuraEnabled
    public static List<ID> getMyOpenCases(){
        
        // Check if user can access to view Case
        if (!Schema.SObjectType.Case.isAccessible()) {
            // Pass error to client
            throw new AuraHandledException('You cannot access the Case object');
        }

        /*// if we've reached this point without throwing an error, the user has the proper permissions to view
        // Cases, so grab all the open (i.e. not closed) ones */
        List<Case> cases = [ SELECT id FROM Case WHERE status != 'Closed']; 
        
        /*// populate a list of the Ids of the returned cases and return that list */
        list<ID> ids = new list<ID>();
        for(case c: cases){
            ids.add(c.Id);
        }
        return ids;   
    }

    @AuraEnabled
    public static Contact SaveContact(Contact con) {
        system.debug(con);
        upsert con;
        return new Contact();
    }
}
